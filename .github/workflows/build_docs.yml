name: Build and Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-doc:
    runs-on: ubuntu-latest
    
    # Add concurrency to prevent conflicts
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies (Python + Chrome for PDF generation)
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        pip install -r software/documentation/requirements.txt

    #################################################
    # Generate Professional Datasheet (HTML + PDF)
    #################################################
    - name: Generate Professional Datasheet
      working-directory: software/documentation
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Generate HTML professional datasheet with automatic image copying
        echo "🏆 Generating professional datasheet..."
        python generate_professional_pdf.py
        
        # Verify HTML was generated
        if [ ! -f "build/datasheet_professional.html" ]; then
          echo "❌ Error: HTML datasheet not generated"
          ls -la build/ || echo "Build directory not found"
          exit 1
        fi
        
        # Convert HTML to PDF using Chrome with error handling
        echo "📄 Converting to PDF with Chrome (timeout: 120s)..."
        cd build
        
        # Try multiple Chrome commands with timeout
        PDF_GENERATED=false
        
        if command -v google-chrome-stable >/dev/null 2>&1 && [ "$PDF_GENERATED" = false ]; then
          echo "🔍 Trying google-chrome-stable..."
          timeout 120s google-chrome-stable --headless --disable-gpu \
            --print-to-pdf=${REPO_NAME}_product_brief.pdf \
            --print-to-pdf-no-header --no-margins \
            --disable-dev-shm-usage --no-sandbox \
            --virtual-time-budget=10000 \
            file://$(pwd)/datasheet_professional.html 2>/dev/null && PDF_GENERATED=true || echo "google-chrome-stable failed"
        fi
        
        if command -v chromium-browser >/dev/null 2>&1 && [ "$PDF_GENERATED" = false ]; then
          echo "🔍 Trying chromium-browser..."
          timeout 120s chromium-browser --headless --disable-gpu \
            --print-to-pdf=${REPO_NAME}_product_brief.pdf \
            --print-to-pdf-no-header --no-margins \
            --disable-dev-shm-usage --no-sandbox \
            --virtual-time-budget=10000 \
            file://$(pwd)/datasheet_professional.html 2>/dev/null && PDF_GENERATED=true || echo "chromium-browser failed"
        fi
        
        if command -v chromium >/dev/null 2>&1 && [ "$PDF_GENERATED" = false ]; then
          echo "🔍 Trying chromium..."
          timeout 120s chromium --headless --disable-gpu \
            --print-to-pdf=${REPO_NAME}_product_brief.pdf \
            --print-to-pdf-no-header --no-margins \
            --disable-dev-shm-usage --no-sandbox \
            --virtual-time-budget=10000 \
            file://$(pwd)/datasheet_professional.html 2>/dev/null && PDF_GENERATED=true || echo "chromium failed"
        fi
        
        if [ "$PDF_GENERATED" = false ]; then
          echo "⚠️ All PDF generation attempts failed or no Chrome/Chromium found"
          echo "📋 Available files:"
          ls -la .
          echo "🔍 Chrome installations:"
          which google-chrome-stable chromium-browser chromium 2>/dev/null || echo "No Chrome found"
        fi
        
        # Verify results and report status
        if [ "$PDF_GENERATED" = true ] && [ -f "${REPO_NAME}_product_brief.pdf" ]; then
          echo "✅ PDF generated successfully: ${REPO_NAME}_product_brief.pdf"
          echo "📊 PDF size: $(du -h ${REPO_NAME}_product_brief.pdf | cut -f1)"
        elif [ "$PDF_GENERATED" = true ]; then
          echo "⚠️ PDF command succeeded but file not found"
          echo "📋 Current directory contents:"
          ls -la .
        else
          echo "⚠️ PDF generation failed, but HTML is available"
        fi
        
        echo "📋 Final build directory contents:"
        ls -la .
        
        echo "✅ Professional datasheet process completed"

    #################################################
    # Deploy to docs/ directory for GitHub Pages
    #################################################
    - name: Prepare docs/ directory
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Clean and create docs directory
        rm -rf docs
        mkdir -p docs

        # Copy HTML (always available)
        cp software/documentation/build/datasheet_professional.html docs/
        
        # Copy PDF if it was generated
        if [ -f "software/documentation/build/${REPO_NAME}_product_brief.pdf" ]; then
          cp software/documentation/build/${REPO_NAME}_product_brief.pdf docs/
          echo "✅ PDF copied to docs/"
        else
          echo "⚠️ PDF not found, only HTML will be deployed"
        fi
        
        # Copy all images and resources (generator already copied everything to build/)
        find software/documentation/build -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" \) -exec cp {} docs/ \; 2>/dev/null || echo "No images found"
        
        # Copy images directory if exists
        if [ -d "software/documentation/build/images" ]; then
          cp -r software/documentation/build/images docs/
          echo "✅ Images directory copied"
        fi
        
        # Create index.html that redirects to datasheet
        echo "<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Product Documentation</title><meta http-equiv=\"refresh\" content=\"0; url=datasheet_professional.html\"></head><body><p>Redirecting to <a href=\"datasheet_professional.html\">professional datasheet</a>...</p></body></html>" > docs/index.html

        # Enable GitHub Pages
        touch docs/.nojekyll
        
        # Show what was deployed
        echo "📋 Deployed files:"
        find docs/ -type f | sort
        
        echo "✅ Documentation deployed to docs/ directory"

    #################################################
    # Deploy changes to main branch
    #################################################
    - name: Commit and push docs/ to main
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Configure git safely
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if there are any changes
        git add docs/
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Pull latest changes to avoid conflicts
        git fetch origin main
        git rebase origin/main || {
          echo "Rebase failed, trying merge strategy"
          git rebase --abort
          git merge origin/main -X ours || {
            echo "Merge failed, force pushing"
            git reset --hard HEAD~1
            git add docs/
          }
        }
        
        # Commit and push
        git commit -m "🚀 Deploy professional documentation [skip ci]" || echo "Commit failed"
        
        # Push with retry mechanism
        for i in {1..3}; do
          if git push origin main; then
            echo "✅ Successfully pushed documentation"
            break
          else
            echo "Push attempt $i failed, retrying..."
            sleep 2
            git pull --rebase origin main || true
          fi
        done